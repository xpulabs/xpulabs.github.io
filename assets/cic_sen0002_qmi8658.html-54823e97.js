import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,d as u,a as n,e as a,w as e,b as s,f as r}from"./app-cdaf2cd7.js";const d="/assets/images/amnos_cic/cic_sen0002_qmi8658_0.jpg",k="/assets/images/amnos_cic/cic_sen0002_qmi8658_1.jpg",m="/assets/images/amnos_cic/cic_sen0002_qmi8658_3.png",f={},v={class:"table-of-contents"},h=r('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>The QMI8658C is a complete 6D MEMS inertial measurement unit (IMU) with 9-axis sensor fusion and specified system level orientation accuracy. When using the QMI8658C in combination with the supplied XKF3 9D-sensor fusion, the system features an accurate ±3° pitch and roll orientation, and a ±5°yaw/heading typical specification.</p><p>The QMI8658C incorporates a 3-axis gyroscope and a 3-axis accelerometer. It provides a UI interface (supporting I³C, I²C and 3-wire or 4-wire SPI) .</p><figure><img src="'+d+'" alt="cic_sen0001_qmi8658_breakout-2" tabindex="0" loading="lazy"><figcaption>cic_sen0001_qmi8658_breakout-2</figcaption></figure><figure><img src="'+k+'" alt="cic_sen0001_qmi8658_breakout-1" tabindex="0" loading="lazy"><figcaption>cic_sen0001_qmi8658_breakout-1</figcaption></figure><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><ul><li>Low 15 mdps/√Hz gyroscope noise, low-latency, and wide bandwidth for performance applications</li><li>Low Noise 200µg/√Hz accelerometer</li><li>Host (slave) interface supports MIPI™ I³C, I²C, and 3-wire or 4-wire SPI</li><li>Complete inertial measurement unit (IMU) with sensor fusion library with specified orientation accuracy of ±3º pitch and roll, ±5º yaw/heading</li><li>High-performance XKF3TM 6/9-axis sensor fusion with in-run calibration for correction of gyroscope bias drift over-temperature and lifetime</li><li>3-axis gyroscope and 3-axis accelerometer in a small 2.5 x 3.0 x 0.86 mm 14-pin LGA package</li><li>Large 1536-byte FIFO can be used to buffer sensor data to lower system power dissipation</li><li>Motion on demand technology for polling-based synchronization</li><li>Large sensor dynamic ranges from ±16°/s to ±2048°/s for gyroscope and ±2 g to ±16 g for accelerometer</li><li>Embedded temperature sensor</li><li>Wide extended operating temperature range (-40°C to 85°C)</li></ul><h2 id="specifications" tabindex="-1"><a class="header-anchor" href="#specifications" aria-hidden="true">#</a> Specifications</h2><ul><li>QMI8658C - Low power &amp; Low nosie 3 Axis Accelerometer &amp; 3 Axis Gyroscope</li><li>Headers for I2C&amp;SPI Interface, Default I2C interface</li><li>Headers for Interrupt, Address and so on.</li><li>Qwiic connector x 2, easy to debug &amp; use</li><li>Dimension: 28 x 18 x 5 mm</li></ul><h2 id="hardware" tabindex="-1"><a class="header-anchor" href="#hardware" aria-hidden="true">#</a> Hardware</h2><figure><img src="'+m+`" alt="cic-sen0002-qmi8658-breakout-pinout" tabindex="0" loading="lazy"><figcaption>cic-sen0002-qmi8658-breakout-pinout</figcaption></figure><table><thead><tr><th style="text-align:left;">Pin</th><th style="text-align:left;">Description</th><th style="text-align:center;">Note</th></tr></thead><tbody><tr><td style="text-align:left;">VDD</td><td style="text-align:left;">Power supply voltage: 1.7-3.6V</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">GND</td><td style="text-align:left;">Ground</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">SCL/SCK</td><td style="text-align:left;">I2C interface Clock bus or SPI interface Clock bus</td><td style="text-align:center;">Had external pull-up resistor 4K7</td></tr><tr><td style="text-align:left;">SDA/SDI</td><td style="text-align:left;">I2C interface Data bus or SPI Data in</td><td style="text-align:center;">Had external pull-up resistor 4K7</td></tr><tr><td style="text-align:left;">SDO</td><td style="text-align:left;">SPI Data Out</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">CSB</td><td style="text-align:left;">SPI Chip Select</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">INT1</td><td style="text-align:left;">Interrupt digital output 1 (totem pole or open-drain) Active low</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">INT2</td><td style="text-align:left;">Interrupt digital output 2 (totem pole or open-drain) Active low</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">SDX</td><td style="text-align:left;">Aux I2C interface Data bus</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">SCX</td><td style="text-align:left;">Aux I2C interface Clock bus</td><td style="text-align:center;"></td></tr></tbody></table><p>Default I2C interface 7 bit device address: 0x6B</p><h2 id="user-guide" tabindex="-1"><a class="header-anchor" href="#user-guide" aria-hidden="true">#</a> User Guide</h2><p>It is the best choice to develop embedded drivers with embedded rust. Because the driver can be used with MCU like ESP32, also used with ARM64 Linux Application, for example raspberry pi directly.</p><p>You can download the qmi8658 rust driver with git, also add your rust project with cargo - <code>cargo add qmi8658</code>.</p><p>The examples as below use the first one.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://github.com/xpulabs/qmi8658-rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p><strong>Simple Read QMI8658 Acc &amp; Gypro Data</strong></p><p>This example will simply read QMI8658 Accelerator &amp; Gypro Sensor Data &amp; Temperature</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">linux_embedded_hal<span class="token punctuation">::</span></span><span class="token class-name">I2cdev</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">qmi8658c<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">qmi8658c<span class="token punctuation">::</span></span><span class="token class-name">Qmi8658</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dev <span class="token operator">=</span> <span class="token class-name">I2cdev</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/i2c-3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> ic <span class="token operator">=</span> <span class="token class-name">Qmi8658</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> cfg <span class="token operator">=</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>
        mode<span class="token punctuation">:</span> <span class="token class-name">Mode</span><span class="token punctuation">::</span><span class="token constant">DUAL</span><span class="token punctuation">,</span>
        acc_range<span class="token punctuation">:</span> <span class="token class-name">Acc_Range</span><span class="token punctuation">::</span><span class="token constant">RANGE_16G</span><span class="token punctuation">,</span>
        acc_odr<span class="token punctuation">:</span> <span class="token class-name">Acc_ODR</span><span class="token punctuation">::</span><span class="token constant">ACC_ODR_6DOF_1880</span><span class="token punctuation">,</span>
        gyro_range<span class="token punctuation">:</span> <span class="token class-name">Gyro_Range</span><span class="token punctuation">::</span><span class="token constant">RANGE_2048DPS</span><span class="token punctuation">,</span>
        gyro_odr<span class="token punctuation">:</span> <span class="token class-name">Gyro_ODR</span><span class="token punctuation">::</span><span class="token constant">GYRO_ODR_940</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> ret <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// let ret = true;</span>
    <span class="token comment">// ic.sw_reset().unwrap();</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> chip_id <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> chip_revision <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">revision</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;chip id = {:#02x}, revision id = {:#02x}, start: {}&quot;</span><span class="token punctuation">,</span> chip_id<span class="token punctuation">,</span> chip_revision<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> ret <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">read_register</span><span class="token punctuation">(</span><span class="token class-name">Register</span><span class="token punctuation">::</span><span class="token constant">CTRL1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;ctrl1 = {:#02x}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">read_register</span><span class="token punctuation">(</span><span class="token class-name">Register</span><span class="token punctuation">::</span><span class="token constant">CTRL2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;ctrl2 = {:#02x}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">read_register</span><span class="token punctuation">(</span><span class="token class-name">Register</span><span class="token punctuation">::</span><span class="token constant">CTRL3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;ctrl3 = {:#02x}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">read_register</span><span class="token punctuation">(</span><span class="token class-name">Register</span><span class="token punctuation">::</span><span class="token constant">CTRL5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;ctrl5 = {:#02x}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">read_register</span><span class="token punctuation">(</span><span class="token class-name">Register</span><span class="token punctuation">::</span><span class="token constant">CTRL7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;ctrl7 = {:#02x}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">read_register</span><span class="token punctuation">(</span><span class="token class-name">Register</span><span class="token punctuation">::</span><span class="token constant">CTRL8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;ctrl8 = {:#02x}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">read_register</span><span class="token punctuation">(</span><span class="token class-name">Register</span><span class="token punctuation">::</span><span class="token constant">CTRL9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;ctrl9 = {:#02x}&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        ic<span class="token punctuation">.</span><span class="token function">read_accl_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ic<span class="token punctuation">.</span><span class="token function">read_temp_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ic<span class="token punctuation">.</span><span class="token function">read_gyro_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Accl X: {:.02}, {}&quot;</span><span class="token punctuation">,</span> ic<span class="token punctuation">.</span>accl_x<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>accl_x_raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Accl Y: {:.02}, {}&quot;</span><span class="token punctuation">,</span> ic<span class="token punctuation">.</span>accl_y<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>accl_y_raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Accl Z: {:.02}, {}&quot;</span><span class="token punctuation">,</span> ic<span class="token punctuation">.</span>accl_z<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>accl_z_raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Gyro X: {:.02}, {}&quot;</span><span class="token punctuation">,</span> ic<span class="token punctuation">.</span>gyro_x<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>gyro_x_raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Gyro Y: {:.02}, {}&quot;</span><span class="token punctuation">,</span> ic<span class="token punctuation">.</span>gyro_y<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>gyro_y_raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Gyro Z: {:.02}, {}&quot;</span><span class="token punctuation">,</span> ic<span class="token punctuation">.</span>gyro_z<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>gyro_z_raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Temperature: {:.02}, {}&quot;</span><span class="token punctuation">,</span> ic<span class="token punctuation">.</span>temp<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>temp_raw<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>/dev/i2c-3</code> is a i2c controller of rpi.</li><li>The QMI8658&#39;s I2C Device address is 0x6B. So we use <code>new</code> function to create a instance. <code>Qmi8658::new(i2c)</code></li><li><code>start</code> function will set up &amp; initailize chip</li><li><code>read_accl_data</code> function will get the accelerator sensor data</li><li><code>read_temp_data</code> function will get the gypro data</li><li><code>read_gyro_data</code> function will get the temperature</li></ul><p>Use the command as below to build and run the app.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-unknown-linux-gnu -- example simple
<span class="token function">scp</span> <span class="token parameter variable">-r</span> ./target/aarch64-unknown-linux-gnu/debug/example/simple rpi@192.168.6.77:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After login the RPI with SSH, we can execute the app directly.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ./simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The terminal will print the accelerator &amp; gyro, temperature.</p><h2 id="buy-it-now" tabindex="-1"><a class="header-anchor" href="#buy-it-now" aria-hidden="true">#</a> Buy it Now</h2>`,29),g={href:"https://www.analoglamb.com",target:"_blank",rel:"noopener noreferrer"},_=n("br",null,null,-1),b={href:"https://www.xpulabs.com",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"resources",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#resources","aria-hidden":"true"},"#"),s(" Resources")],-1),w=n("h3",{id:"documents",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#documents","aria-hidden":"true"},"#"),s(" Documents")],-1),x={href:"https://www.lcsc.com/datasheet/lcsc_datasheet_2409291934_QST-QMI8658C_C2842151.pdf",target:"_blank",rel:"noopener noreferrer"},q=n("br",null,null,-1),C=n("a",{href:"/files/schematic/schematic__cic_sen0002_qmi8658_breakout_v10.pdf"},"Schematic",-1),I=n("h3",{id:"codes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#codes","aria-hidden":"true"},"#"),s(" Codes")],-1),D={href:"https://github.com/xpulabs/qmi8658-rs",target:"_blank",rel:"noopener noreferrer"},S=n("h3",{id:"_3d-drawing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3d-drawing","aria-hidden":"true"},"#"),s(" 3D Drawing")],-1),R=n("p",null,"TBD",-1),A=n("h2",{id:"faq",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),s(" FAQ")],-1),T=n("p",null,"TBD",-1);function L(M,G){const t=o("router-link"),p=o("ExternalLinkIcon");return i(),l("div",null,[u(" more "),n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#overview"},{default:e(()=>[s("Overview")]),_:1})]),n("li",null,[a(t,{to:"#features"},{default:e(()=>[s("Features")]),_:1})]),n("li",null,[a(t,{to:"#specifications"},{default:e(()=>[s("Specifications")]),_:1})]),n("li",null,[a(t,{to:"#hardware"},{default:e(()=>[s("Hardware")]),_:1})]),n("li",null,[a(t,{to:"#user-guide"},{default:e(()=>[s("User Guide")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#examples"},{default:e(()=>[s("Examples")]),_:1})])])]),n("li",null,[a(t,{to:"#buy-it-now"},{default:e(()=>[s("Buy it Now")]),_:1})]),n("li",null,[a(t,{to:"#resources"},{default:e(()=>[s("Resources")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#documents"},{default:e(()=>[s("Documents")]),_:1})]),n("li",null,[a(t,{to:"#codes"},{default:e(()=>[s("Codes")]),_:1})]),n("li",null,[a(t,{to:"#_3d-drawing"},{default:e(()=>[s("3D Drawing")]),_:1})])])]),n("li",null,[a(t,{to:"#faq"},{default:e(()=>[s("FAQ")]),_:1})])])]),h,n("p",null,[n("a",g,[s("AnalogLamb.Com"),a(p)]),_,n("a",b,[s("Xpulabs.Com"),a(p)])]),y,w,n("p",null,[n("a",x,[s("MPU-6050 Datasheet"),a(p)]),q,C]),I,n("p",null,[n("a",D,[s("Github - qmi8658-rs"),a(p)])]),S,R,A,T])}const P=c(f,[["render",L],["__file","cic_sen0002_qmi8658.html.vue"]]);export{P as default};
