import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,d as u,a as n,e as s,w as e,b as a,f as r}from"./app-cdaf2cd7.js";const d="/assets/images/amnos_cic/cic_sen0001_qma6100p_0.jpg",k="/assets/images/amnos_cic/cic_sen0001_qma6100p_1.jpg",m="/assets/images/amnos_cic/cic_sen0001_qma6100p_3.png",h={},f={class:"table-of-contents"},_=r('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>Note: QMA6100P is pin to pin compatible with QMA7981, QMA7981 is EOL.</p><p>The QMA6100 is a 3-Axis Accelerometer. This surface-mount, small sized chip has integrated acceleration transducer with signal conditioning ASIC, sensing tilt, motion, shock and vibration, targeted for applications such as screen rotation, step counting, sleep monitor, gaming and personal navigation in mobile and wearable smart devices.</p><p>The QMA6100 is based on the state-of-the-art, high resolution single crystal silicon MEMS technology. Along with custom-designed 14-bit ADC ASIC, it offers the advantages of low noise, high accuracy, low power consumption, and offset trimming. The device supports digital interface I2C and SPI.</p><figure><img src="'+d+'" alt="cic_sen0001_qma6100p_breakout-2" tabindex="0" loading="lazy"><figcaption>cic_sen0001_qma6100p_breakout-2</figcaption></figure><figure><img src="'+k+'" alt="cic_sen0001_qma6100p_breakout-1" tabindex="0" loading="lazy"><figcaption>cic_sen0001_qma6100p_breakout-1</figcaption></figure><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><ul><li>3-Axis Accelerometer in a 2x2x0.95 mm3 Land Grid Array Package (LGA), guaranteed to operate over a temperature range of -40 °C to +85 °C</li><li>14-Bit ADC with low noise accelerometer sensor</li><li>I2C Interface with SDR modes. Support SPI digital interface</li><li>Wide range operation voltage (1.71V to 3.6V) and low power consumption (2-50μA low power conversion current)</li><li>Integrated FIFO with depth of 64 frames</li><li>Built–in motion algorithm</li></ul><h2 id="specifications" tabindex="-1"><a class="header-anchor" href="#specifications" aria-hidden="true">#</a> Specifications</h2><ul><li>QMA6100 - 3-Axis Accelerometer Integrated 14-bit ADC &amp; motion algorithm</li><li>Headers for I2C/SPI Interface, Default I2C interface</li><li>Headers for Interrupt, Address and so on.</li><li>Qwiic connector x 2, easy to debug &amp; use</li><li>Dimension: 28 x 18 x 5 mm</li></ul><h2 id="hardware" tabindex="-1"><a class="header-anchor" href="#hardware" aria-hidden="true">#</a> Hardware</h2><figure><img src="'+m+`" alt="cic-sen0001-qma6100p-breakout-pinout" tabindex="0" loading="lazy"><figcaption>cic-sen0001-qma6100p-breakout-pinout</figcaption></figure><table><thead><tr><th style="text-align:left;">Pin</th><th style="text-align:left;">Description</th><th style="text-align:center;">Note</th></tr></thead><tbody><tr><td style="text-align:left;">VDD</td><td style="text-align:left;">Power supply voltage: 2.4-3.5V</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">GND</td><td style="text-align:left;">Ground</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">SCL/SCK</td><td style="text-align:left;">I<sup>2</sup>C interface Clock bus or SPI interface Clock bus</td><td style="text-align:center;">Had external pull-up resistor 4K7</td></tr><tr><td style="text-align:left;">SDA/SDO</td><td style="text-align:left;">I<sup>2</sup>C interface Data bus or SPI Data out</td><td style="text-align:center;">Had external pull-up resistor 4K7</td></tr><tr><td style="text-align:left;">SDI</td><td style="text-align:left;">SPI Data In</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">CSB</td><td style="text-align:left;">SPI Chip Select</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">INT1</td><td style="text-align:left;">Interrupt digital output 1 (totem pole or open-drain) Active low</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">INT2</td><td style="text-align:left;">Interrupt digital output 2 (totem pole or open-drain) Active low</td><td style="text-align:center;"></td></tr></tbody></table><p>Default I<sup>2</sup>C interface 7 bit device address: 0x12</p><h2 id="user-guide" tabindex="-1"><a class="header-anchor" href="#user-guide" aria-hidden="true">#</a> User Guide</h2><p>It is the best choice to develop embedded drivers with embedded rust. Because the driver can be used with MCU like ESP32, also used with ARM64 Linux Application, for example raspberry pi directly.</p><p>You can download the qma6100p rust driver with git, also add your rust project with cargo - <code>cargo add qma6100p</code>.</p><p>The examples as below use the first one.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone https://github.com/xpulabs/qma6100p-rs/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p><strong>Simple Read MPU-6050 Acc &amp; Gypro Data</strong></p><p>This example will simply read qma6100p Accelerator &amp; Gypro Sensor Data &amp; Temperature</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">linux_embedded_hal<span class="token punctuation">::</span></span><span class="token class-name">I2cdev</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">qma6100p<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">qma6100p<span class="token punctuation">::</span></span><span class="token class-name">Qma6100p</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dev <span class="token operator">=</span> <span class="token class-name">I2cdev</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/i2c-3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> ic <span class="token operator">=</span> <span class="token class-name">Qma6100p</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> chip_id <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Qma6100p chip id: 0x{:02x}&quot;</span><span class="token punctuation">,</span> chip_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ic<span class="token punctuation">.</span><span class="token function">soft_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ic<span class="token punctuation">.</span><span class="token function">set_range</span><span class="token punctuation">(</span><span class="token class-name">Range</span><span class="token punctuation">::</span><span class="token constant">RANGE_2G</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ic<span class="token punctuation">.</span><span class="token function">enable_accel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ic<span class="token punctuation">.</span><span class="token function">calibrate_offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        ic<span class="token punctuation">.</span><span class="token function">get_accel_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ic<span class="token punctuation">.</span><span class="token function">offset_values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;X: {:.02}, Y: {:.02}, Z: {:.02}&quot;</span><span class="token punctuation">,</span> ic<span class="token punctuation">.</span>output_data<span class="token punctuation">.</span>x_data<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>output_data<span class="token punctuation">.</span>y_data<span class="token punctuation">,</span> ic<span class="token punctuation">.</span>output_data<span class="token punctuation">.</span>z_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// println!(&quot;X: {:.02}, Y: {:.02}, Z: {:.02}&quot;, ic.raw_data.x_raw, ic.raw_data.y_raw, ic.raw_data.z_raw);</span>
        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>/dev/i2c-3</code> is a i2c controller of rpi.</li><li>The QMA6100P&#39;s I<sup>2</sup>C Device address is 0x12. So we use <code>new</code> function to create a instance. <code>Qma6100p::new(i2c)</code></li><li><code>id</code> read the chip ID</li><li><code>soft_reset</code> function will reset the chip with software</li><li><code>enable_accel</code> function will enable accelerator</li><li><code>calibrate_offset</code> function will calibrate the accelerator</li><li><code>get_accel_data</code> function will get the accelerator sensor data</li></ul><p>Use the command as below to build and run the app.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-unknown-linux-gnu -- example linux-qma6100p
<span class="token function">scp</span> <span class="token parameter variable">-r</span> ./target/aarch64-unknown-linux-gnu/debug/example/linux-qma6100p rpi@192.168.6.77:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After login the RPI with SSH, we can execute the app directly.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ./linux-qma6100p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The terminal will print the accelerator values.</p><h2 id="buy-it-now" tabindex="-1"><a class="header-anchor" href="#buy-it-now" aria-hidden="true">#</a> Buy it Now</h2>`,30),g={href:"https://www.analoglamb.com",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),v={href:"https://www.xpulabs.com",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"resources",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#resources","aria-hidden":"true"},"#"),a(" Resources")],-1),x=n("h3",{id:"documents",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#documents","aria-hidden":"true"},"#"),a(" Documents")],-1),y={href:"https://www.lcsc.com/datasheet/lcsc_datasheet_2410121333_QST-QMA6100P_C2887190.pdf",target:"_blank",rel:"noopener noreferrer"},A=n("br",null,null,-1),I=n("a",{href:"/files/schematic/schematic__cic_sen0001_qma6100p_breakout_v10.pdf"},"Schematic",-1),q=n("h3",{id:"codes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#codes","aria-hidden":"true"},"#"),a(" Codes")],-1),D={href:"https://github.com/xpulabs/qma6100p",target:"_blank",rel:"noopener noreferrer"},C=n("h3",{id:"_3d-drawing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3d-drawing","aria-hidden":"true"},"#"),a(" 3D Drawing")],-1),S=n("p",null,"TBD",-1),P=n("h2",{id:"faq",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),a(" FAQ")],-1),Q=n("p",null,"TBD",-1);function T(M,N){const t=p("router-link"),o=p("ExternalLinkIcon");return c(),l("div",null,[u(" more "),n("nav",f,[n("ul",null,[n("li",null,[s(t,{to:"#overview"},{default:e(()=>[a("Overview")]),_:1})]),n("li",null,[s(t,{to:"#features"},{default:e(()=>[a("Features")]),_:1})]),n("li",null,[s(t,{to:"#specifications"},{default:e(()=>[a("Specifications")]),_:1})]),n("li",null,[s(t,{to:"#hardware"},{default:e(()=>[a("Hardware")]),_:1})]),n("li",null,[s(t,{to:"#user-guide"},{default:e(()=>[a("User Guide")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#examples"},{default:e(()=>[a("Examples")]),_:1})])])]),n("li",null,[s(t,{to:"#buy-it-now"},{default:e(()=>[a("Buy it Now")]),_:1})]),n("li",null,[s(t,{to:"#resources"},{default:e(()=>[a("Resources")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#documents"},{default:e(()=>[a("Documents")]),_:1})]),n("li",null,[s(t,{to:"#codes"},{default:e(()=>[a("Codes")]),_:1})]),n("li",null,[s(t,{to:"#_3d-drawing"},{default:e(()=>[a("3D Drawing")]),_:1})])])]),n("li",null,[s(t,{to:"#faq"},{default:e(()=>[a("FAQ")]),_:1})])])]),_,n("p",null,[n("a",g,[a("AnalogLamb.Com"),s(o)]),b,n("a",v,[a("Xpulabs.Com"),s(o)])]),w,x,n("p",null,[n("a",y,[a("QMA6100P Datasheet"),s(o)]),A,I]),q,n("p",null,[n("a",D,[a("Github - qma6100p-rs"),s(o)])]),C,S,P,Q])}const E=i(h,[["render",T],["__file","cic_sen0001_qma6100p.html.vue"]]);export{E as default};
