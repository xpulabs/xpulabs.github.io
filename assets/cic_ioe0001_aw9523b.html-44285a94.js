import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as u,d,a as n,e as a,w as e,b as s,f as c}from"./app-cdaf2cd7.js";const r="/assets/images/amnos_cic/cic_ioe0001_aw9523b_02.png",k="/assets/images/amnos_cic/cic_ioe0001_aw9523b_01.png",m="/assets/images/amnos_cic/cic_ioe0001_aw9523b_04.svg",v={},b={class:"table-of-contents"},h=c('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>AW9523B is a 16 multi-function LED driver and GPIO controller. Any of the 16 I/O ports can be configured as LED drive mode or GPIO mode.Furthermore, any GPIO can be configured as an input or an output independently.</p><p>After power on, all the 16 I/O ports are configured as GPIO output as default, which default states areset according to the I2C device address selectioninputs, AD0 and AD1. All I/O ports configured as inputs are continuously monitored for state changes. State changes are indicated by the INTN output. When AW9523B reads GPIO state through the I2C interface, the interrupt is cleared. Interrupt has 8μs deglitch.</p><p>When the I/O ports are configured as LED drive mode, AW9523B can set the current of LED drive between 0~IMAX by I2C interface, which is divided by 256 steps linear dimming. The default maximum current (IMAX) is 37mA, and IMAX can be changed in GCR register.</p><p><img src="'+r+'" alt="cic-ioe0001-aw9523b-breakout-2" loading="lazy"><br><img src="'+k+'" alt="cic-ioe0001-aw9523b-breakout-1" loading="lazy"></p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><ul><li>16 multi-function I/O, each for LED drive (current-source dimming) or GPIO mode</li><li>256 steps linear dimming in LED drive mode</li><li>Any GPIO can be configured as an input or an output independently</li><li>Support interrupt, 8μs deglitch, low-level active</li><li>Standard I2C interface, AD1/AD0 select I2C device address</li><li>SDA, SCL, RSTN, and all GPIO can accept in 1.8V logic input</li><li>Supply shutdown function, low-level active 2.5V~5.5V power supply</li></ul><h2 id="specifications" tabindex="-1"><a class="header-anchor" href="#specifications" aria-hidden="true">#</a> Specifications</h2><ul><li>AW9523B - a 16 multi-function LED driver and GPIO controller</li><li>Headers for P0, P1, VDD, GND, easy to use</li><li>Headers for I2C, VDD, GND, Reset &amp; AD0/1, easy to connect with MCU</li><li>Qwiic connector x 2, easy to debug &amp; use</li><li>Dimension: 44 x 18 x 5 mm</li></ul><h2 id="hardware" tabindex="-1"><a class="header-anchor" href="#hardware" aria-hidden="true">#</a> Hardware</h2><figure><img src="'+m+`" alt="cic-ioe0001-aw9523b-breakout-pinout" tabindex="0" loading="lazy"><figcaption>cic-ioe0001-aw9523b-breakout-pinout</figcaption></figure><table><thead><tr><th style="text-align:left;">Pin</th><th style="text-align:left;">Description</th><th style="text-align:center;">Note</th></tr></thead><tbody><tr><td style="text-align:left;">GND</td><td style="text-align:left;">Ground</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">VCC</td><td style="text-align:left;">Power Suppy 2.5-5.5V, for example 3.3V</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">SDA</td><td style="text-align:left;">I<sup>2</sup>C interface Data bus</td><td style="text-align:center;">Had external pull-up resistor 4K7</td></tr><tr><td style="text-align:left;">SCL</td><td style="text-align:left;">I<sup>2</sup>C interface Clock bus</td><td style="text-align:center;">Had external pull-up resistor 4K7</td></tr><tr><td style="text-align:left;">RESET</td><td style="text-align:left;">Hardware Reset Pin, Low Reset</td><td style="text-align:center;">Had external pull-up resistor 10K</td></tr><tr><td style="text-align:left;">INT</td><td style="text-align:left;">Interrupt pin output, Open-Drain mode, Active low</td><td style="text-align:center;">Had external pull-up resistor 10K</td></tr><tr><td style="text-align:left;">AD0</td><td style="text-align:left;">I<sup>2</sup>C interface device address bit0</td><td style="text-align:center;">Default 0</td></tr><tr><td style="text-align:left;">AD1</td><td style="text-align:left;">I<sup>2</sup>C interface device address bit1</td><td style="text-align:center;">Default 0</td></tr><tr><td style="text-align:left;">P00-P07</td><td style="text-align:left;">GPIO mode default, input or output, open-drain (default) or push-pull mode. Can be configured as LED drive mode</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">P10-P17</td><td style="text-align:left;">GPIO mode default, input or output, push-pull mode. Can be configured as LED drive mode</td><td style="text-align:center;"></td></tr></tbody></table><p>Default I<sup>2</sup>C interface 7 bit device address: 0x58</p><h2 id="user-guide" tabindex="-1"><a class="header-anchor" href="#user-guide" aria-hidden="true">#</a> User Guide</h2><p>It is the best choice to develop embedded drivers with embedded rust. Because the driver can be used with MCU like ESP32, also used with ARM64 Linux Application, for example raspberry pi directly.</p><p>You can download the aw9523b rust driver with git, also add your rust project with cargo - <code>cargo add aw9523b</code>.</p><p>The examples as below use the first one.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone https://github.com/xpulabs/aw9523b-rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p><strong>GPIO Mode - Input</strong></p><p>This example will config aw9523b&#39;s P00 as input, and read the pin level. If the pin level is high, Console will print &quot;P00 is high&quot;.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">linux_embedded_hal<span class="token punctuation">::</span></span><span class="token class-name">I2cdev</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Aw9523b</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dev <span class="token operator">=</span> <span class="token class-name">I2cdev</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/i2c-3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> ic <span class="token operator">=</span> <span class="token class-name">Aw9523b</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> id <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;aw9523b id = {:02x}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ic<span class="token punctuation">.</span><span class="token function">set_io_direction</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P00</span><span class="token punctuation">,</span> <span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Dir</span><span class="token punctuation">::</span><span class="token constant">INPUT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token operator">!</span>ic<span class="token punctuation">.</span><span class="token function">pin_is_low</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P00</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;P00 is high&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;P00 is low&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>/dev/i2c-3</code> is a i2c controller of rpi.</li><li>The AW9523B&#39;s I<sup>2</sup>C Device address is 0x58. So we use <code>new</code> function to create a instance. <code>Aw9523b::new(dev, 0x58)</code></li><li><code>set_io_direction</code> function will set the <code>P00</code> as Input</li><li>In the loop, we always read the pin level and check the pin is low or not. <code>pin_is_low</code></li></ul><p>Use the command as below to build and run the app.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-unknown-linux-gnu -- example linux-gpio-input
<span class="token function">scp</span> <span class="token parameter variable">-r</span> ./target/aarch64-unknown-linux-gnu/debug/example/linux-gpio-input rpi@192.168.6.77:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After login the RPI with SSH, we can execute the app directly.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ./linux-gpio-input
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The terminal will print the level of P00.</p><p><strong>GPIO Mode - Output</strong></p><p>This example will config aw9523b&#39;s P00 &amp; P10 as output, and set the pin level high or low. If the pin is connected with LED, the LED will ON or OFF.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">linux_embedded_hal<span class="token punctuation">::</span></span><span class="token class-name">I2cdev</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Aw9523b</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dev <span class="token operator">=</span> <span class="token class-name">I2cdev</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/i2c-3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> ic <span class="token operator">=</span> <span class="token class-name">Aw9523b</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> id <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;aw9523b id = {:02x}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ic<span class="token punctuation">.</span><span class="token function">port0_output_mode</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">OutputMode</span><span class="token punctuation">::</span><span class="token constant">PP</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;P00 set high&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ic<span class="token punctuation">.</span><span class="token function">set_pin_high</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P00</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;P00 set low&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ic<span class="token punctuation">.</span><span class="token function">set_pin_low</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P00</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;P10 set high&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ic<span class="token punctuation">.</span><span class="token function">set_pin_high</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;P10 set low&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ic<span class="token punctuation">.</span><span class="token function">set_pin_low</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>/dev/i2c-3</code> is a i2c controller of rpi.</li><li>The AW9523B&#39;s I<sup>2</sup>C Device address is 0x58. So we use <code>new</code> function to create a instance. <code>Aw9523b::new(dev, 0x58)</code></li><li>AW9523B Port0 has two ouput mode - Push Pull and Open Drain, the default mode is Open Drain, So we need use function <code>port0_output_mode</code> to change the mode to Push Pull.</li><li>In the loop, we always set the pin level high or low after a delay with function <code>set_pin_high</code> &amp; <code>set_pin_low</code>.</li></ul><p>Use the command as below to build and run the app.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-unknown-linux-gnu -- example linux-gpio-output
<span class="token function">scp</span> <span class="token parameter variable">-r</span> ./target/aarch64-unknown-linux-gnu/debug/example/linux-gpio-output rpi@192.168.6.77:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After login the RPI with SSH, we can execute the app directly.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ./linux-gpio-output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The LED will ON, after a delay, will OFF.</p><p><strong>LED Mode</strong></p><p>This example will config aw9523b&#39;s P00 &amp; P17 as LED mode to driver a LED directly, and LED Dimming.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">linux_embedded_hal<span class="token punctuation">::</span></span><span class="token class-name">I2cdev</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Aw9523b</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dev <span class="token operator">=</span> <span class="token class-name">I2cdev</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/i2c-3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> ic <span class="token operator">=</span> <span class="token class-name">Aw9523b</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> id <span class="token operator">=</span> ic<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;aw9523b id = {:02x}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;aw9523b led mode: dimming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ic<span class="token punctuation">.</span><span class="token function">pin_led_mode</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P00</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ic<span class="token punctuation">.</span><span class="token function">pin_led_mode</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ic<span class="token punctuation">.</span><span class="token function">led_dimming_range</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">DimmingRange</span><span class="token punctuation">::</span><span class="token constant">IMAX</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">loop</span> <span class="token punctuation">{</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0u8</span><span class="token punctuation">..</span><span class="token number">255</span> <span class="token punctuation">{</span>
            ic<span class="token punctuation">.</span><span class="token function">led_set_dimming</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P00</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ic<span class="token punctuation">.</span><span class="token function">led_set_dimming</span><span class="token punctuation">(</span><span class="token namespace">aw9523b<span class="token punctuation">::</span></span><span class="token class-name">Pin</span><span class="token punctuation">::</span><span class="token constant">P17</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">200</span> <span class="token punctuation">{</span>
                <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>/dev/i2c-3</code> is a i2c controller of rpi.</li><li>The AW9523B&#39;s I<sup>2</sup>C Device address is 0x58. So we use <code>new</code> function to create a instance. <code>Aw9523b::new(dev, 0x58)</code></li><li>AW9523B&#39;s pin mode is GPIO, we need to change to LED mode with function <code>pin_led_mode</code>.</li><li>Using function <code>led_dimming_range</code> control the LED current globaly.</li><li>In the loop, we always set the LED current level from 0 to 255 with function <code>led_set_dimming</code>.</li></ul><p>Use the command as below to build and run the app.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-unknown-linux-gnu -- example linux-led-mode
<span class="token function">scp</span> <span class="token parameter variable">-r</span> ./target/aarch64-unknown-linux-gnu/debug/example/linux-led-mode rpi@192.168.6.77:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After login the RPI with SSH, we can execute the app directly.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ./linux-led-mode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The video will display the LED Dimming.</p>`,46),f=n("iframe",{width:"315",height:"560",src:"https://youtube.com/embed/-ALFgKjCpXg?si=VcMNR2VKzAhbIDDC",title:"LED Dimming - CIC AW9523B Breakout",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:""},null,-1),w=n("h2",{id:"buy-it-now",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#buy-it-now","aria-hidden":"true"},"#"),s(" Buy it Now")],-1),g={href:"https://www.analoglamb.com",target:"_blank",rel:"noopener noreferrer"},_=c('<h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h2><h3 id="documents" tabindex="-1"><a class="header-anchor" href="#documents" aria-hidden="true">#</a> Documents</h3><p><a href="/files/datasheet/DS_AW9523B_EN_V2.4.pdf">AW9523B Datasheet</a><br><a href="/files/schematic/schematic__cic_ioe0001_aw9523_breakout_v10.pdf">Schematic</a></p><h3 id="codes" tabindex="-1"><a class="header-anchor" href="#codes" aria-hidden="true">#</a> Codes</h3>',4),x={href:"https://github.com/xpulabs/aw9523b-rs",target:"_blank",rel:"noopener noreferrer"},y=n("h3",{id:"_3d-drawing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3d-drawing","aria-hidden":"true"},"#"),s(" 3D Drawing")],-1),D=n("p",null,"TBD",-1),P=n("h2",{id:"faq",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),s(" FAQ")],-1),I=n("p",null,"TBD",-1);function A(C,q){const t=o("router-link"),p=o("ExternalLinkIcon");return l(),u("div",null,[d(" more "),n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#overview"},{default:e(()=>[s("Overview")]),_:1})]),n("li",null,[a(t,{to:"#features"},{default:e(()=>[s("Features")]),_:1})]),n("li",null,[a(t,{to:"#specifications"},{default:e(()=>[s("Specifications")]),_:1})]),n("li",null,[a(t,{to:"#hardware"},{default:e(()=>[s("Hardware")]),_:1})]),n("li",null,[a(t,{to:"#user-guide"},{default:e(()=>[s("User Guide")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#examples"},{default:e(()=>[s("Examples")]),_:1})])])]),n("li",null,[a(t,{to:"#buy-it-now"},{default:e(()=>[s("Buy it Now")]),_:1})]),n("li",null,[a(t,{to:"#resources"},{default:e(()=>[s("Resources")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#documents"},{default:e(()=>[s("Documents")]),_:1})]),n("li",null,[a(t,{to:"#codes"},{default:e(()=>[s("Codes")]),_:1})]),n("li",null,[a(t,{to:"#_3d-drawing"},{default:e(()=>[s("3D Drawing")]),_:1})])])]),n("li",null,[a(t,{to:"#faq"},{default:e(()=>[s("FAQ")]),_:1})])])]),h,f,w,n("p",null,[n("a",g,[s("AnalogLamb.Com"),a(p)])]),_,n("p",null,[n("a",x,[s("Github - aw9523b-rs"),a(p)])]),y,D,P,I])}const L=i(v,[["render",A],["__file","cic_ioe0001_aw9523b.html.vue"]]);export{L as default};
