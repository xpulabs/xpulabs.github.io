import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as u,d as i,a as n,e as a,w as p,b as s,f as r}from"./app-cdaf2cd7.js";const k="/assets/images/amnos_alb/alb_sen0001_mpu6050_01.jpg",d="/assets/images/amnos_alb/alb_sen0001_mpu6050_00.jpg",m="/assets/images/amnos_alb/alb_sen0001_mpu6050_02.png",v={},b={class:"table-of-contents"},g=r('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>The MPU-6050™ parts are the world’s first MotionTracking devices designed for the low power, low cost, and high-performance. The MPU-6050 devices combine a 3-axis gyroscope and a 3-axis accelerometer on the same silicon die, together with an onboard Digital Motion Processor™ (DMP™), which processes complex 6-axis MotionFusion algorithms. The device can access external magnetometers or other sensors through an auxiliary master I²C bus, allowing the devices to gather a full set of sensor data without intervention from the system processor.</p><p>For precision tracking of both fast and slow motions, the parts feature a user-programmable gyro full-scale range of ±250, ±500, ±1000, and ±2000 °/sec (dps), and a user-programmable accelerometer full-scale range of ±2g, ±4g, ±8g, and ±16g. Additional features include an embedded temperature sensor and an on-chip oscillator with ±1% variation over the operating temperature range.</p><figure><img src="'+k+'" alt="alb_sen0001_mpu6050_breakout-2" tabindex="0" loading="lazy"><figcaption>alb_sen0001_mpu6050_breakout-2</figcaption></figure><figure><img src="'+d+'" alt="alb_sen0001_mpu6050_breakout-1" tabindex="0" loading="lazy"><figcaption>alb_sen0001_mpu6050_breakout-1</figcaption></figure><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><ul><li>Tri-Axis angular rate sensor (gyro) with a sensitivity up to 131 LSBs/dps and a full-scale range of ±250, ±500, ±1000, and ±2000dps</li><li>Tri-Axis accelerometer with a programmable full scale range of ±2g, ±4g, ±8g and ±16g</li><li>Digital-output temperature sensor</li><li>VDD Supply voltage range of 2.375V–3.46V; VLOGIC (MPU-6050) at 1.8V±5% or VDD</li><li>Accel low power mode operating currents: 10µA at 1Hz, 20µA at 5Hz, 70µA at 20Hz, 140µA at 40Hz</li><li>400kHz Fast Mode I²C interfaces</li></ul><h2 id="specifications" tabindex="-1"><a class="header-anchor" href="#specifications" aria-hidden="true">#</a> Specifications</h2><ul><li>AW9523B - a 16 multi-function LED driver and GPIO controller</li><li>Headers for I<sup>2</sup>C Interface</li><li>Headers for FSYC, Address and so on.</li><li>Qwiic connector x 2, easy to debug &amp; use</li><li>Dimension: 28 x 18 x 5 mm</li></ul><h2 id="hardware" tabindex="-1"><a class="header-anchor" href="#hardware" aria-hidden="true">#</a> Hardware</h2><figure><img src="'+m+`" alt="alb-sen0001-mpu6050-breakout-pinout" tabindex="0" loading="lazy"><figcaption>alb-sen0001-mpu6050-breakout-pinout</figcaption></figure><table><thead><tr><th style="text-align:left;">Pin</th><th style="text-align:left;">Description</th><th style="text-align:center;">Note</th></tr></thead><tbody><tr><td style="text-align:left;">VDD</td><td style="text-align:left;">Power supply voltage: 2.4-3.5V</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">VIO</td><td style="text-align:left;">Digital I/O supply voltage: 1.8-VDD</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">GND</td><td style="text-align:left;">Ground</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">SDA</td><td style="text-align:left;">I<sup>2</sup>C interface Data bus</td><td style="text-align:center;">Had external pull-up resistor 4K7</td></tr><tr><td style="text-align:left;">SCL</td><td style="text-align:left;">I<sup>2</sup>C interface Clock bus</td><td style="text-align:center;">Had external pull-up resistor 4K7</td></tr><tr><td style="text-align:left;">INT</td><td style="text-align:left;">Interrupt digital output (totem pole or open-drain) Active low</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">AD0</td><td style="text-align:left;">I<sup>2</sup>C interface device address bit0</td><td style="text-align:center;">Default 0</td></tr><tr><td style="text-align:left;">FSYNC</td><td style="text-align:left;">Frame synchronization digital input. Connect to GND if not used</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">SDE</td><td style="text-align:left;">Aux I<sup>2</sup>C interface Data bus</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">SCE</td><td style="text-align:left;">Aux I<sup>2</sup>C interface Clock bus</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">CLKIN</td><td style="text-align:left;">Optional external reference clock input. Connect to GND if unused.</td><td style="text-align:center;"></td></tr></tbody></table><p>Default I<sup>2</sup>C interface 7 bit device address: 0x34</p><h2 id="user-guide" tabindex="-1"><a class="header-anchor" href="#user-guide" aria-hidden="true">#</a> User Guide</h2><p>It is the best choice to develop embedded drivers with embedded rust. Because the driver can be used with MCU like ESP32, also used with ARM64 Linux Application, for example raspberry pi directly.</p><p>You can download the mpu-6050 rust driver with git, also add your rust project with cargo - <code>cargo add mpu6050</code>.</p><p>The examples as below use the first one.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone https://github.com/juliangaal/mpu6050/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p><strong>Simple Read MPU-6050 Acc &amp; Gypro Data</strong></p><p>This example will simply read mpu-6050 Accelerator &amp; Gypro Sensor Data &amp; Temperature</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">mpu6050<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">linux_embedded_hal<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">I2cdev</span><span class="token punctuation">,</span> <span class="token class-name">Delay</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">i2cdev<span class="token punctuation">::</span>linux<span class="token punctuation">::</span></span><span class="token class-name">LinuxI2CError</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Mpu6050Error</span><span class="token operator">&lt;</span><span class="token class-name">LinuxI2CError</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i2c <span class="token operator">=</span> <span class="token class-name">I2cdev</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/i2c-3&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token class-name">Mpu6050Error</span><span class="token punctuation">::</span><span class="token class-name">I2c</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> delay <span class="token operator">=</span> <span class="token class-name">Delay</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> mpu <span class="token operator">=</span> <span class="token class-name">Mpu6050</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>i2c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    mpu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> delay<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token comment">// get roll and pitch estimate</span>
        <span class="token keyword">let</span> acc <span class="token operator">=</span> mpu<span class="token punctuation">.</span><span class="token function">get_acc_angles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;r/p: {:?}&quot;</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// get sensor temp</span>
        <span class="token keyword">let</span> temp <span class="token operator">=</span> mpu<span class="token punctuation">.</span><span class="token function">get_temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;temp: {:?}c&quot;</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// get gyro data, scaled with sensitivity </span>
        <span class="token keyword">let</span> gyro <span class="token operator">=</span> mpu<span class="token punctuation">.</span><span class="token function">get_gyro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;gyro: {:?}&quot;</span><span class="token punctuation">,</span> gyro<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// get accelerometer data, scaled with sensitivity</span>
        <span class="token keyword">let</span> acc <span class="token operator">=</span> mpu<span class="token punctuation">.</span><span class="token function">get_acc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;acc: {:?}&quot;</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>/dev/i2c-3</code> is a i2c controller of rpi.</li><li>The MPU-6050&#39;s I<sup>2</sup>C Device address is 0x34. So we use <code>new</code> function to create a instance. <code>Mpu6050::new(i2c)</code></li><li><code>get_acc</code> function will get the accelerator sensor data</li><li><code>get_gyro</code> function will get the gypro data</li><li><code>get_temp</code> function will get the temperature</li><li><code>get_acc_angles</code> function will get roll and pitch estimate</li></ul><p>Use the command as below to build and run the app.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-unknown-linux-gnu -- example simple
<span class="token function">scp</span> <span class="token parameter variable">-r</span> ./target/aarch64-unknown-linux-gnu/debug/example/simple rpi@192.168.6.77:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After login the RPI with SSH, we can execute the app directly.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ./simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The terminal will print the accelerator &amp; gyro, temperature.</p><p><strong>MPU-6050 Self-Test</strong></p><p>This example will read MPU-6050 Register and check the value in the range of MPU-6050.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">mpu6050<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token namespace">device<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">linux_embedded_hal<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">I2cdev</span><span class="token punctuation">,</span> <span class="token class-name">Delay</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">i2cdev<span class="token punctuation">::</span>linux<span class="token punctuation">::</span></span><span class="token class-name">LinuxI2CError</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">mpu6050<span class="token punctuation">::</span>device<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token constant">ACCEL_HPF</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Mpu6050Error</span><span class="token operator">&lt;</span><span class="token class-name">LinuxI2CError</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i2c <span class="token operator">=</span> <span class="token class-name">I2cdev</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/i2c-3&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token class-name">Mpu6050Error</span><span class="token punctuation">::</span><span class="token class-name">I2c</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> delay <span class="token operator">=</span> <span class="token class-name">Delay</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> mpu <span class="token operator">=</span> <span class="token class-name">Mpu6050</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>i2c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    mpu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> delay<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// Test power management</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test power management&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Test gyro config</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test gyro config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_gyro_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">GyroRange</span><span class="token punctuation">::</span><span class="token constant">D250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_gyro_range</span><span class="token punctuation">(</span><span class="token class-name">GyroRange</span><span class="token punctuation">::</span><span class="token constant">D500</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_gyro_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">GyroRange</span><span class="token punctuation">::</span><span class="token constant">D500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Test accel config</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test accel config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">AccelRange</span><span class="token punctuation">::</span><span class="token constant">G2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_accel_range</span><span class="token punctuation">(</span><span class="token class-name">AccelRange</span><span class="token punctuation">::</span><span class="token constant">G4</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">AccelRange</span><span class="token punctuation">::</span><span class="token constant">G4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// accel_hpf: per default RESET/no filter, see ACCEL_CONFIG</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test accel hpf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_hpf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_RESET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_accel_hpf</span><span class="token punctuation">(</span><span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_1P25</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_hpf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_1P25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_accel_hpf</span><span class="token punctuation">(</span><span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_2P5</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_hpf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_2P5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_accel_hpf</span><span class="token punctuation">(</span><span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_5</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_hpf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_accel_hpf</span><span class="token punctuation">(</span><span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_0P63</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_hpf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_0P63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_accel_hpf</span><span class="token punctuation">(</span><span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_HOLD</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_hpf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_HOLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// test sleep. Default no, in wake()</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_sleep_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_sleep_enabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_sleep_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_sleep_enabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_sleep_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// test temp enable/disable</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test temp enable/disable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_temp_enabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_temp_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token number">36.53</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_temp_enabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_temp_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token number">36.53</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Test clksel: GXAXIS per default, set in wake()</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test CLKSEL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_clock_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">GXAXIS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_clock_source</span><span class="token punctuation">(</span><span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">GYAXIS</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_clock_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">GYAXIS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_clock_source</span><span class="token punctuation">(</span><span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">GZAXIS</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_clock_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">GZAXIS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_clock_source</span><span class="token punctuation">(</span><span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">OSCILL</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_clock_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">OSCILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_clock_source</span><span class="token punctuation">(</span><span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">STOP</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_clock_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">STOP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_clock_source</span><span class="token punctuation">(</span><span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">RESERV</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_clock_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">RESERV</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_clock_source</span><span class="token punctuation">(</span><span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">EXT_19P2</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_clock_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token constant">EXT_19P2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">set_clock_source</span><span class="token punctuation">(</span><span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token class-name">EXT_32p7</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_clock_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">CLKSEL</span><span class="token punctuation">::</span><span class="token class-name">EXT_32p7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// reset</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test reset&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">reset_device</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> delay<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_hpf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token constant">ACCEL_HPF</span><span class="token punctuation">::</span><span class="token constant">_RESET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_accel_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">AccelRange</span><span class="token punctuation">::</span><span class="token constant">G2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_gyro_range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">GyroRange</span><span class="token punctuation">::</span><span class="token constant">D250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_sleep_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mpu<span class="token punctuation">.</span><span class="token function">get_temp_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Test successful&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>/dev/i2c-3</code> is a i2c controller of rpi.</li><li>The MPU-6050&#39;s I<sup>2</sup>C Device address is 0x34. So we use <code>new</code> function to create a instance. <code>Mpu6050::new(i2c)</code></li><li>In the loop, read MPU-6050 Register and check the value in the range of MPU-6050.</li></ul><p>Use the command as below to build and run the app.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-unknown-linux-gnu -- example <span class="token builtin class-name">test</span>
<span class="token function">scp</span> <span class="token parameter variable">-r</span> ./target/aarch64-unknown-linux-gnu/debug/example/test rpi@192.168.6.77:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After login the RPI with SSH, we can execute the app directly.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ./test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Motion Detection</strong></p><p>This example will detect motion with MPU-6050.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">mpu6050<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token namespace">device<span class="token punctuation">::</span></span><span class="token constant">MOT_DETECT_STATUS</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">linux_embedded_hal<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">I2cdev</span><span class="token punctuation">,</span> <span class="token class-name">Delay</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">i2cdev<span class="token punctuation">::</span>linux<span class="token punctuation">::</span></span><span class="token class-name">LinuxI2CError</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">embedded_hal<span class="token punctuation">::</span>blocking<span class="token punctuation">::</span>delay<span class="token punctuation">::</span></span><span class="token class-name">DelayMs</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Mpu6050Error</span><span class="token operator">&lt;</span><span class="token class-name">LinuxI2CError</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i2c <span class="token operator">=</span> <span class="token class-name">I2cdev</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/i2c-3&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token class-name">Mpu6050Error</span><span class="token punctuation">::</span><span class="token class-name">I2c</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> delay <span class="token operator">=</span> <span class="token class-name">Delay</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> mpu <span class="token operator">=</span> <span class="token class-name">Mpu6050</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>i2c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    mpu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> delay<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    mpu<span class="token punctuation">.</span><span class="token function">setup_motion_detection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> count<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> mpu<span class="token punctuation">.</span><span class="token function">get_motion_detected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;YEAH BUDDY. Motion by axes: {:b}&quot;</span><span class="token punctuation">,</span> mpu<span class="token punctuation">.</span><span class="token function">read_byte</span><span class="token punctuation">(</span><span class="token constant">MOT_DETECT_STATUS</span><span class="token punctuation">::</span><span class="token constant">ADDR</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        delay<span class="token punctuation">.</span><span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>
            mpu<span class="token punctuation">.</span><span class="token function">reset_device</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> delay<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>/dev/i2c-3</code> is a i2c controller of rpi.</li><li>The MPU-6050&#39;s I<sup>2</sup>C Device address is 0x34. So we use <code>new</code> function to create a instance. <code>Mpu6050::new(i2c)</code></li><li><code>setup_motion_detection</code> function will set up motion detection</li><li><code>get_motion_detected</code> function will get detected motion</li></ul><p>Use the command as below to build and run the app.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cargo</span> build <span class="token parameter variable">--target</span> aarch64-unknown-linux-gnu -- example motion_detection
<span class="token function">scp</span> <span class="token parameter variable">-r</span> ./target/aarch64-unknown-linux-gnu/debug/example/motion_detection rpi@192.168.6.77:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>After login the RPI with SSH, we can execute the app directly.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ./motion_detection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="buy-it-now" tabindex="-1"><a class="header-anchor" href="#buy-it-now" aria-hidden="true">#</a> Buy it Now</h2>`,45),_={href:"https://www.analoglamb.com",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"resources",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#resources","aria-hidden":"true"},"#"),s(" Resources")],-1),h=n("h3",{id:"documents",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#documents","aria-hidden":"true"},"#"),s(" Documents")],-1),y={href:"https://cdn.sparkfun.com/datasheets/Components/General%20IC/PS-MPU-6000A.pdf",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),x=n("a",{href:"/files/schematic/schematic__alb_sen0001_mpu6050_breakout_v10.pdf"},"Schematic",-1),C=n("h3",{id:"codes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#codes","aria-hidden":"true"},"#"),s(" Codes")],-1),E={href:"https://github.com/juliangaal/mpu6050",target:"_blank",rel:"noopener noreferrer"},L=n("h3",{id:"_3d-drawing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3d-drawing","aria-hidden":"true"},"#"),s(" 3D Drawing")],-1),q=n("p",null,"TBD",-1),S=n("h2",{id:"faq",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),s(" FAQ")],-1),D=n("p",null,"TBD",-1);function A(I,T){const t=o("router-link"),e=o("ExternalLinkIcon");return l(),u("div",null,[i(" more "),n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#overview"},{default:p(()=>[s("Overview")]),_:1})]),n("li",null,[a(t,{to:"#features"},{default:p(()=>[s("Features")]),_:1})]),n("li",null,[a(t,{to:"#specifications"},{default:p(()=>[s("Specifications")]),_:1})]),n("li",null,[a(t,{to:"#hardware"},{default:p(()=>[s("Hardware")]),_:1})]),n("li",null,[a(t,{to:"#user-guide"},{default:p(()=>[s("User Guide")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#examples"},{default:p(()=>[s("Examples")]),_:1})])])]),n("li",null,[a(t,{to:"#buy-it-now"},{default:p(()=>[s("Buy it Now")]),_:1})]),n("li",null,[a(t,{to:"#resources"},{default:p(()=>[s("Resources")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#documents"},{default:p(()=>[s("Documents")]),_:1})]),n("li",null,[a(t,{to:"#codes"},{default:p(()=>[s("Codes")]),_:1})]),n("li",null,[a(t,{to:"#_3d-drawing"},{default:p(()=>[s("3D Drawing")]),_:1})])])]),n("li",null,[a(t,{to:"#faq"},{default:p(()=>[s("FAQ")]),_:1})])])]),g,n("p",null,[n("a",_,[s("AnalogLamb.Com"),a(e)])]),f,h,n("p",null,[n("a",y,[s("MPU-6050 Datasheet"),a(e)]),w,x]),C,n("p",null,[n("a",E,[s("Github - mpu6050-rs"),a(e)])]),L,q,S,D])}const H=c(v,[["render",A],["__file","alb_sen0001_mpu6050.html.vue"]]);export{H as default};
